import os
import logging
import csv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import re

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CSV_FILE = "–Ω–æ–º–µ—Ä–∞.csv"  # CSV —Ñ–∞–π–ª —Å –Ω–æ–º–µ—Ä–∞–º–∏
DEFAULT_PAGE_SIZE = 30

def ru_to_lat(text):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –≤ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏"""
    repl = str.maketrans("–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•", "ABEKMHOPCTYX")
    return text.translate(repl)

def extract_letters_from_number(number):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏–∑ –Ω–æ–º–µ—Ä–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ –∑–∞–≥–ª–∞–≤–Ω—ã–µ"""
    letters = re.findall(r"[–ê-–ØA-Z]+", number.upper())
    letters_only = "".join(letters)
    return ru_to_lat(letters_only)

def load_numbers_from_csv():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    numbers_data = []
    try:
        if not os.path.exists(CSV_FILE):
            logger.error(f"CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {CSV_FILE}")
            return []
        
        with open(CSV_FILE, 'r', encoding='utf-8') as file:
            csv_reader = csv.reader(file)
            next(csv_reader, None)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            
            for row in csv_reader:
                if len(row) >= 4:
                    numbers_data.append({
                        'number': row[0].strip(),
                        'region': row[1].strip(),
                        'price': row[2].strip(),
                        'comment': row[3].strip()
                    })
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(numbers_data)} –Ω–æ–º–µ—Ä–æ–≤ –∏–∑ CSV —Ñ–∞–π–ª–∞")
        return numbers_data
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ CSV —Ñ–∞–π–ª–∞: {e}")
        return []

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
NUMBERS_DATA = []

def search_numbers_by_letters(search_query, max_results=50):
    """–ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–æ–≤ –ø–æ –±—É–∫–≤–∞–º"""
    try:
        query = ru_to_lat(search_query.upper().strip())
        if not query:
            return []
        
        results = []
        for data in NUMBERS_DATA:
            number_letters = extract_letters_from_number(data['number'])
            if query in number_letters:
                result_line = f"{data['number']}"
                if data['region'] and data['region'] != "None":
                    result_line += f" (—Ä–µ–≥–∏–æ–Ω {data['region']})"
                if data['price'] and data['price'] != "None":
                    result_line += f" - {data['price']}‚ÇΩ"
                if data['comment'] and data['comment'] != "None":
                    result_line += f" {data['comment']}"
                
                results.append(result_line)
                if len(results) >= max_results:
                    break
        
        return results
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –±—É–∫–≤–∞–º: {e}")
        return []

def search_numbers_by_digits(search_query, max_results=50):
    """–ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–æ–≤ –ø–æ —Ü–∏—Ñ—Ä–∞–º"""
    try:
        query = search_query.strip()
        if not query:
            return []
        
        results = []
        for data in NUMBERS_DATA:
            full_number = f"{data['number']}{data['region']}"
            if query in full_number:
                result_line = f"{data['number']}"
                if data['region'] and data['region'] != "None":
                    result_line += f" (—Ä–µ–≥–∏–æ–Ω {data['region']})"
                if data['price'] and data['price'] != "None":
                    result_line += f" - {data['price']}‚ÇΩ"
                if data['comment'] and data['comment'] != "None":
                    result_line += f" {data['comment']}"
                
                results.append(result_line)
                if len(results) >= max_results:
                    break
        
        return results
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ —Ü–∏—Ñ—Ä–∞–º: {e}")
        return []

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup([
        ["üîÅ –°—Ç–∞—Ä—Ç"],
        ["\U0001F50D –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –ø–æ —Ü–∏—Ñ—Ä–∞–º (–∞–≤—Ç–æ)", "\U0001F520 –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –ø–æ –±—É–∫–≤–∞–º"],
        ["\U0001F6E0 –ù–∞—à–∏ —É—Å–ª—É–≥–∏", "\U0001F4DE –ù–∞—à –∞–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"]
    ], resize_keyboard=True)

    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏—é BlatZnak!\n"
        "–ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –ø—Ä–æ–¥–∞–∂–µ–π –≥–æ—Å –Ω–æ–º–µ—Ä–æ–≤ –∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–∞ —É—á–µ—Ç.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ===
async def unified_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_data = context.user_data

    if text == "üîÅ –°—Ç–∞—Ä—Ç":
        await start(update, context)
        return

    elif text == "\U0001F520 –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –ø–æ –±—É–∫–≤–∞–º":
        user_data["expecting_letter_search"] = True
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –°–°, –ê–ê, –ú–ö):")
        return

    elif user_data.get("expecting_letter_search"):
        user_data["expecting_letter_search"] = False
        results = search_numbers_by_letters(text, max_results=50)
        
        if results:
            reply = f"üîç –ù–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤ —Å –±—É–∫–≤–∞–º–∏ '{text.upper()}': {len(results)}\n\n"
            reply += "\n".join(results)
        else:
            reply = f"‚ùå –ù–æ–º–µ—Ä–æ–≤ —Å –±—É–∫–≤–∞–º–∏ '{text.upper()}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        
        for i in range(0, len(reply), 4000):
            await update.message.reply_text(reply[i:i+4000])
        return

    elif text == "\U0001F50D –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –ø–æ —Ü–∏—Ñ—Ä–∞–º (–∞–≤—Ç–æ)":
        user_data["expecting_digit_search"] = True
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 777, 123):")
        return

    elif user_data.get("expecting_digit_search"):
        user_data["expecting_digit_search"] = False
        results = search_numbers_by_digits(text, max_results=50)
        
        if results:
            reply = f"üîç –ù–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤ —Å —Ü–∏—Ñ—Ä–∞–º–∏ '{text}': {len(results)}\n\n"
            reply += "\n".join(results)
        else:
            reply = f"‚ùå –ù–æ–º–µ—Ä–æ–≤ —Å —Ü–∏—Ñ—Ä–∞–º–∏ '{text}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        
        for i in range(0, len(reply), 4000):
            await update.message.reply_text(reply[i:i+4000])
        return

    elif text == "\U0001F6E0 –ù–∞—à–∏ —É—Å–ª—É–≥–∏":
        await update.message.reply_text(
            "\U0001F4CC –ù–∞—à–∏ —É—Å–ª—É–≥–∏:\n"
            "- –î—É–±–ª–∏–∫–∞—Ç –Ω–æ–º–µ—Ä–æ–≤\n"
            "- –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ —É—á–µ—Ç\n"
            "- –ü—Ä–æ–¥–∞–∂–∞ –∫—Ä–∞—Å–∏–≤—ã—Ö –Ω–æ–º–µ—Ä–æ–≤\n"
            "- –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ"
        )

    elif text == "\U0001F4DE –ù–∞—à –∞–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã":
        await update.message.reply_text(
            "\U0001F3E2 –ê–¥—Ä–µ—Å: —É–ª–∏—Ü–∞ –¢–≤–∞—Ä–¥–æ–≤—Å–∫–æ–≥–æ, 8–∫5—Å1, –ú–æ—Å–∫–≤–∞\n"
            "\U0001F4CD [–û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ù–∞–≤–∏–≥–∞—Ç–æ—Ä–µ](https://yandex.ru/navi/?ol=geo&text=%D1%83%D0%BB%D0%B8%D1%86%D0%B0%20%D0%A2%D0%B2%D0%B0%D1%80%D0%B4%D0%BE%D0%B2%D1%81%D0%BA%D0%BE%D0%B3%D0%BE,%208%D0%BA5%D1%811&sll=37.388268,55.792574)\n"
            "\u260E [–ü–æ–∑–≤–æ–Ω–∏—Ç—å: +7 (966) 000-26-26](tel:+79660002626)\n"
            "\U0001F4AC Telegram: @blatznak77\n"
            "\U0001F4F1 [–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp](https://wa.me/79660002626)",
            parse_mode="Markdown"
        )
    else:
        # –ü–æ–∏—Å–∫ –ø–æ —Ü–∏—Ñ—Ä–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        results = search_numbers_by_digits(text, max_results=50)
        
        if results:
            reply = f"üîç –ù–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤ —Å '{text}': {len(results)}\n\n"
            reply += "\n".join(results)
        else:
            reply = f"‚ùå –ù–æ–º–µ—Ä–æ–≤ —Å '{text}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        
        for i in range(0, len(reply), 4000):
            await update.message.reply_text(reply[i:i+4000])

# === Main ===
def main():
    global NUMBERS_DATA
    
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–º–µ—Ä–∞—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–º–µ—Ä–∞—Ö...")
    NUMBERS_DATA = load_numbers_from_csv()
    
    if not NUMBERS_DATA:
        logger.warning("–î–∞–Ω–Ω—ã–µ –æ –Ω–æ–º–µ—Ä–∞—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ CSV —Ñ–∞–π–ª–∞.")
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unified_handler))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()

if __name__ == "__main__":
    main()

