import logging
import os
import re
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google –¢–∞–±–ª–∏—Ü—ã ===
SCOPE = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive.file",
    "https://www.googleapis.com/auth/drive"
]

CREDS = ServiceAccountCredentials.from_json_keyfile_name("blat-znak-2f081fa17909.json", SCOPE)
CLIENT = gspread.authorize(CREDS)
SHEET = CLIENT.open("–≤—Å–µ_–Ω–æ–º–µ—Ä–∞_–¥–ª—è_–±–æ—Ç–∞").sheet1

# === Telegram –±–æ—Ç ===
user_states = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    user_states[user_id] = None
    keyboard = [["üî¢ –ü–æ–∏—Å–∫ –ø–æ —Ü–∏—Ñ—Ä–∞–º"]]
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–º–µ—Ä–æ–≤:",
                                    reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    text = update.message.text.strip()

    if text == "üî¢ –ü–æ–∏—Å–∫ –ø–æ —Ü–∏—Ñ—Ä–∞–º":
        user_states[user_id] = "search_digits"
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 777):")
        return

    if user_states.get(user_id) == "search_digits":
        digits = re.sub(r"\D", "", text)
        if not digits:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
            return

        rows = SHEET.get_all_records()
        results = []

        for row in rows:
            number = str(row.get("–ù–æ–º–µ—Ä", ""))
            if number[-len(digits):] == digits:
                price = row.get("–¶–µ–Ω–∞", "‚Äî")
                region = row.get("–†–µ–≥–∏–æ–Ω", "‚Äî")
                comment = row.get("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "")
                formatted = f"üöó *{number}* | {region} | üí∞ {price}" + (f"\nüí¨ {comment}" if comment else "")
                results.append(formatted)

        if results:
            reply = "\n\n".join(results)
        else:
            reply = "‚ùó –ù–æ–º–µ—Ä–æ–≤ —Å —Ç–∞–∫–∏–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

        await update.message.reply_text(reply, parse_mode="Markdown")
        return

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞.")

# === –ó–∞–ø—É—Å–∫ ===
def main():
    TOKEN = os.getenv("BOT_TOKEN")
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
