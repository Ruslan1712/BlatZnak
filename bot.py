import logging
import os
import re

import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.getenv("7799074981:AAFKHc41FKQb_yDI-gemhq6stMagiIfQ680")
MOTO_FILE = "moto_numbers.txt"
TRAILER_FILE = "trailer_numbers.txt"
PAGE_SIZE = 20
user_pages = {}

# === Google Sheets ===
SCOPES = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/spreadsheets",
          "https://www.googleapis.com/auth/drive.file", "https://www.googleapis.com/auth/drive"]
CREDS = ServiceAccountCredentials.from_json_keyfile_name("blat-znak-2f081fa17909.json", SCOPES)
SHEET = gspread.authorize(CREDS).open("–≤—Å–µ_–Ω–æ–º–µ—Ä–∞_–¥–ª—è_–±–æ—Ç–∞").sheet1

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –°—Ç–∞—Ä—Ç ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üî¢ –ü–æ–∏—Å–∫ –ø–æ —Ü–∏—Ñ—Ä–∞–º (–∞–≤—Ç–æ)", callback_data="search_auto")],
        [InlineKeyboardButton("üöó –í—Å–µ –∞–≤—Ç–æ –Ω–æ–º–µ—Ä–∞", callback_data="all_auto")],
        [InlineKeyboardButton("üèçÔ∏è –ú–æ—Ç–æ –Ω–æ–º–µ—Ä–∞", callback_data="moto")],
        [InlineKeyboardButton("üöõ –ü—Ä–∏—Ü–µ–ø –Ω–æ–º–µ—Ä–∞", callback_data="trailer")],
        [InlineKeyboardButton("üõ† –ù–∞—à–∏ —É—Å–ª—É–≥–∏", callback_data="services")],
        [InlineKeyboardButton("üìç –ù–∞—à –∞–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")]
    ]
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏—é BlatZnak!
–ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –ø—Ä–æ–¥–∞–∂–µ–π –≥–æ—Å –Ω–æ–º–µ—Ä–æ–≤ –∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–∞ —É—á–µ—Ç.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "search_auto":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 777):")
        context.user_data["state"] = "search_digits"

    elif query.data == "all_auto":
        rows = SHEET.get_all_records()
        if not rows:
            await query.message.reply_text("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        text = "\n".join(
            f"{row['–ù–æ–º–µ—Ä']} | –†–µ–≥–∏–æ–Ω: {row['–†–µ–≥–∏–æ–Ω']} | {row['–¶–µ–Ω–∞']} ‚ÇΩ {f'({row['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']})' if row.get('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π') else ''}"
            for row in rows
        )
        await query.message.reply_text(text[:4000])

    elif query.data in ["moto", "trailer"]:
        user_pages[user_id] = 0
        context.user_data["type"] = query.data
        await send_page(query, user_id, context)

    elif query.data == "next_page":
        user_pages[user_id] += 1
        await send_page(query, user_id, context)

    elif query.data == "services":
        text = "üõ† –ù–∞—à–∏ —É—Å–ª—É–≥–∏:
‚Ä¢ –î—É–±–ª–∏–∫–∞—Ç –Ω–æ–º–µ—Ä–æ–≤
‚Ä¢ –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ —É—á–µ—Ç
‚Ä¢ –ü—Ä–æ–¥–∞–∂–∞ –∫—Ä–∞—Å–∏–≤—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
‚Ä¢ –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ"
        await query.message.reply_text(text)

    elif query.data == "contacts":
        await query.message.reply_text("üìç –ê–¥—Ä–µ—Å: –¢–≤–∞—Ä–¥–æ–≤—Å–∫–æ–≥–æ 8, –∫5, —Å1
üìû –¢–µ–ª: +7 (999) 123-45-67
üí¨ Telegram: @blatznak
üì≤ WhatsApp: +7 (999) 123-45-67")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("state") == "search_digits":
        digits = re.sub(r"\D", "", update.message.text)
        rows = SHEET.get_all_records()
        results = []
        for row in rows:
            plate = str(row.get("–ù–æ–º–µ—Ä", "")).lower()
            digits_only = re.sub(r"\D", "", plate)
            if digits_only.endswith(digits):
                formatted = f"{plate.upper()} | –†–µ–≥–∏–æ–Ω: {row.get('–†–µ–≥–∏–æ–Ω', '')} | {row.get('–¶–µ–Ω–∞', '')} ‚ÇΩ"
                if row.get("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"):
                    formatted += f" ({row['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']})"
                results.append(formatted)

        if results:
            await update.message.reply_text("\n".join(results[:40]))
        else:
            await update.message.reply_text("‚ùó –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        context.user_data["state"] = None

# === –ü–æ–∫–∞–∑ –º–æ—Ç–æ/–ø—Ä–∏—Ü–µ–ø–æ–≤ ===
async def send_page(query, user_id, context):
    file_path = MOTO_FILE if context.user_data["type"] == "moto" else TRAILER_FILE
    try:
        with open(file_path, encoding="utf-8") as f:
            items = [line.strip() for line in f if line.strip()]
    except FileNotFoundError:
        await query.edit_message_text("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    page = user_pages.get(user_id, 0)
    start = page * PAGE_SIZE
    end = start + PAGE_SIZE
    data = items[start:end]

    if not data:
        await query.edit_message_text("–ë–æ–ª—å—à–µ –Ω–æ–º–µ—Ä–æ–≤ –Ω–µ—Ç.")
        return

    text = "\n".join(data)
    keyboard = []
    if end < len(items):
        keyboard.append([InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data="next_page")])

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))


# === –ó–∞–ø—É—Å–∫ ===
def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()


if __name__ == "__main__":
    main()