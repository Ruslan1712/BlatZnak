import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import openpyxl
import re

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
EXCEL_FILE = "–Ω–æ–º–µ—Ä–∞_–∑–∞–≥–ª–∞–≤–Ω—ã–µ.xlsx"  # –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É —Å –Ω–æ–º–µ—Ä–∞–º–∏
MOSREG_FILE = "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å.txt"
MOTO_FILE = "moto_numbers.txt"
TRAILER_FILE = "trailer_numbers.txt"
MOSCOW_FILE = "270315af-8756-4519-b3cf-88fac83dbc0b.txt"
DEFAULT_PAGE_SIZE = 30

def ru_to_lat(text):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –≤ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –∞–Ω–∞–ª–æ–≥–∏"""
    repl = str.maketrans("–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•", "ABEKMHOPCTYX")
    return text.translate(repl)

def extract_letters_from_number(number):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏–∑ –Ω–æ–º–µ—Ä–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ –∑–∞–≥–ª–∞–≤–Ω—ã–µ"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –±—É–∫–≤—ã (—Ä—É—Å—Å–∫–∏–µ –∏ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ)
    letters = re.findall(r"[–ê-–ØA-Z]+", number.upper())
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –±—É–∫–≤—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    letters_only = "".join(letters)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã –≤ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
    return ru_to_lat(letters_only)

def search_numbers_by_letters(search_query, max_results=50):
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–æ–≤ –ø–æ –±—É–∫–≤–∞–º –≤ Excel —Ñ–∞–π–ª–µ
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(EXCEL_FILE):
            logger.error(f"Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {EXCEL_FILE}")
            return []
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º Excel —Ñ–∞–π–ª
        wb = openpyxl.load_workbook(EXCEL_FILE)
        ws = wb.active
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        query = ru_to_lat(search_query.upper().strip())
        
        if not query:
            return []
        
        results = []
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º (–Ω–∞—á–∏–Ω–∞—è —Å–æ 2-–π, –ø—Ä–æ–ø—É—Å–∫–∞—è –∑–∞–≥–æ–ª–æ–≤–∫–∏)
        for row in range(2, ws.max_row + 1):
            number = str(ws.cell(row=row, column=1).value or "")
            region = str(ws.cell(row=row, column=2).value or "")
            price = str(ws.cell(row=row, column=3).value or "")
            comment = str(ws.cell(row=row, column=4).value or "")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±—É–∫–≤—ã –∏–∑ –Ω–æ–º–µ—Ä–∞
            number_letters = extract_letters_from_number(number)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –Ω–æ–º–µ—Ä –∏—Å–∫–æ–º—ã–µ –±—É–∫–≤—ã
            if query in number_letters:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                result_line = f"{number}"
                if region and region != "None":
                    result_line += f" (—Ä–µ–≥–∏–æ–Ω {region})"
                if price and price != "None":
                    result_line += f" - {price}‚ÇΩ"
                if comment and comment != "None":
                    result_line += f" {comment}"
                
                results.append(result_line)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if len(results) >= max_results:
                    break
        
        wb.close()
        return results
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –±—É–∫–≤–∞–º: {e}")
        return []

def search_numbers_by_digits(search_query, max_results=50):
    """
    –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–æ–≤ –ø–æ —Ü–∏—Ñ—Ä–∞–º –≤ Excel —Ñ–∞–π–ª–µ
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(EXCEL_FILE):
            logger.error(f"Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {EXCEL_FILE}")
            return []
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º Excel —Ñ–∞–π–ª
        wb = openpyxl.load_workbook(EXCEL_FILE)
        ws = wb.active
        
        query = search_query.strip()
        
        if not query:
            return []
        
        results = []
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º (–Ω–∞—á–∏–Ω–∞—è —Å–æ 2-–π, –ø—Ä–æ–ø—É—Å–∫–∞—è –∑–∞–≥–æ–ª–æ–≤–∫–∏)
        for row in range(2, ws.max_row + 1):
            number = str(ws.cell(row=row, column=1).value or "")
            region = str(ws.cell(row=row, column=2).value or "")
            price = str(ws.cell(row=row, column=3).value or "")
            comment = str(ws.cell(row=row, column=4).value or "")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –Ω–æ–º–µ—Ä –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω –∏—Å–∫–æ–º—ã–µ —Ü–∏—Ñ—Ä—ã
            full_number = f"{number}{region}"
            if query in full_number:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                result_line = f"{number}"
                if region and region != "None":
                    result_line += f" (—Ä–µ–≥–∏–æ–Ω {region})"
                if price and price != "None":
                    result_line += f" - {price}‚ÇΩ"
                if comment and comment != "None":
                    result_line += f" {comment}"
                
                results.append(result_line)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if len(results) >= max_results:
                    break
        
        wb.close()
        return results
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ —Ü–∏—Ñ—Ä–∞–º: {e}")
        return []

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup([
        ["üîÅ –°—Ç–∞—Ä—Ç"],
        ["\U0001F50D –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –ø–æ —Ü–∏—Ñ—Ä–∞–º (–∞–≤—Ç–æ)", "\U0001F520 –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –ø–æ –±—É–∫–≤–∞–º"],
        ["\U0001F6CD –ú–æ—Ç–æ –Ω–æ–º–µ—Ä–∞", "\U0001F69B –ü—Ä–∏—Ü–µ–ø –Ω–æ–º–µ—Ä–∞"],
        ["\U0001F4CD –ú–æ—Å–∫–≤–∞ –≤—Å–µ –Ω–æ–º–µ—Ä–∞", "\U0001F4CD –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª. –≤—Å–µ –Ω–æ–º–µ—Ä–∞"],
        ["\U0001F6E0 –ù–∞—à–∏ —É—Å–ª—É–≥–∏", "\U0001F4DE –ù–∞—à –∞–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"]
    ], resize_keyboard=True)

    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏—é BlatZnak!\n"
        "–ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –ø—Ä–æ–¥–∞–∂–µ–π –≥–æ—Å –Ω–æ–º–µ—Ä–æ–≤ –∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–∞ —É—á–µ—Ç.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# === –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª —Ü–µ–ª–∏–∫–æ–º ===
async def send_full_file(update: Update, context: ContextTypes.DEFAULT_TYPE, filename: str):
    if not os.path.exists(filename):
        await update.message.reply_text("–§–∞–π–ª —Å –Ω–æ–º–µ—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    try:
        with open(filename, "r", encoding="utf-8") as f:
            content = f.read()
            for i in range(0, len(content), 4000):
                await update.message.reply_text(content[i:i+4000])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.")

# === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ===
async def unified_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_data = context.user_data

    if text == "üîÅ –°—Ç–∞—Ä—Ç":
        await start(update, context)
        return

    if user_data.get("expecting_page_size"):
        try:
            page_size = int(text)
            if page_size < 1 or page_size > 100:
                raise ValueError
            user_data["page_size"] = page_size
            user_data["expecting_page_size"] = False
            category = user_data["selected_category"]
            file_map = {
                "moscow": MOSCOW_FILE,
                "mosreg": MOSREG_FILE,
                "trailer": TRAILER_FILE
            }
            filename = file_map[category]
            if os.path.exists(filename):
                with open(filename, "r", encoding="utf-8") as f:
                    lines = f.readlines()
                for i in range(0, len(lines), page_size):
                    chunk = "".join(lines[i:i + page_size])
                    await update.message.reply_text(chunk)
            else:
                await update.message.reply_text("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except ValueError:
            user_data["expecting_page_size"] = False
            await update.message.reply_text(
                "\u2757 –°–µ–π—á–∞—Å –æ–∂–∏–¥–∞–ª–æ—Å—å —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100 –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–æ–º–µ—Ä–æ–≤. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ üîÅ –°—Ç–∞—Ä—Ç –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
            )
        return

    elif text == "\U0001F520 –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –ø–æ –±—É–∫–≤–∞–º":
        user_data["expecting_letter_search"] = True
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –°–°, –ê–ê, –ú–ö):")
        return

    elif user_data.get("expecting_letter_search"):
        user_data["expecting_letter_search"] = False
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –ø–æ –±—É–∫–≤–∞–º
        results = search_numbers_by_letters(text, max_results=50)
        
        if results:
            reply = f"üîç –ù–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤ —Å –±—É–∫–≤–∞–º–∏ '{text.upper()}': {len(results)}\n\n"
            reply += "\n".join(results)
        else:
            reply = f"‚ùå –ù–æ–º–µ—Ä–æ–≤ —Å –±—É–∫–≤–∞–º–∏ '{text.upper()}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for i in range(0, len(reply), 4000):
            await update.message.reply_text(reply[i:i+4000])
        return

    elif text == "\U0001F50D –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –ø–æ —Ü–∏—Ñ—Ä–∞–º (–∞–≤—Ç–æ)":
        user_data["expecting_digit_search"] = True
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 777, 123):")
        return

    elif user_data.get("expecting_digit_search"):
        user_data["expecting_digit_search"] = False
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ü–∏—Ñ—Ä–∞–º
        results = search_numbers_by_digits(text, max_results=50)
        
        if results:
            reply = f"üîç –ù–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤ —Å —Ü–∏—Ñ—Ä–∞–º–∏ '{text}': {len(results)}\n\n"
            reply += "\n".join(results)
        else:
            reply = f"‚ùå –ù–æ–º–µ—Ä–æ–≤ —Å —Ü–∏—Ñ—Ä–∞–º–∏ '{text}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for i in range(0, len(reply), 4000):
            await update.message.reply_text(reply[i:i+4000])
        return

    elif text == "\U0001F6CD –ú–æ—Ç–æ –Ω–æ–º–µ—Ä–∞":
        await send_full_file(update, context, MOTO_FILE)

    elif text in {
        "\U0001F69B –ü—Ä–∏—Ü–µ–ø –Ω–æ–º–µ—Ä–∞",
        "\U0001F4CD –ú–æ—Å–∫–≤–∞ –≤—Å–µ –Ω–æ–º–µ—Ä–∞",
        "\U0001F4CD –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª. –≤—Å–µ –Ω–æ–º–µ—Ä–∞"
    }:
        category_map = {
            "\U0001F69B –ü—Ä–∏—Ü–µ–ø –Ω–æ–º–µ—Ä–∞": "trailer",
            "\U0001F4CD –ú–æ—Å–∫–≤–∞ –≤—Å–µ –Ω–æ–º–µ—Ä–∞": "moscow",
            "\U0001F4CD –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª. –≤—Å–µ –Ω–æ–º–µ—Ä–∞": "mosreg"
        }
        category = category_map[text]
        user_data["expecting_page_size"] = True
        user_data["selected_category"] = category
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30)")

    elif text == "\U0001F6E0 –ù–∞—à–∏ —É—Å–ª—É–≥–∏":
        await update.message.reply_text(
            "\U0001F4CC –ù–∞—à–∏ —É—Å–ª—É–≥–∏:\n"
            "- –î—É–±–ª–∏–∫–∞—Ç –Ω–æ–º–µ—Ä–æ–≤\n"
            "- –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ —É—á–µ—Ç\n"
            "- –ü—Ä–æ–¥–∞–∂–∞ –∫—Ä–∞—Å–∏–≤—ã—Ö –Ω–æ–º–µ—Ä–æ–≤\n"
            "- –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ"
        )

    elif text == "\U0001F4DE –ù–∞—à –∞–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã":
        await update.message.reply_text(
            "\U0001F3E2 –ê–¥—Ä–µ—Å: —É–ª–∏—Ü–∞ –¢–≤–∞—Ä–¥–æ–≤—Å–∫–æ–≥–æ, 8–∫5—Å1, –ú–æ—Å–∫–≤–∞\n"
            "\U0001F4CD [–û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ù–∞–≤–∏–≥–∞—Ç–æ—Ä–µ](https://yandex.ru/navi/?ol=geo&text=%D1%83%D0%BB%D0%B8%D1%86%D0%B0%20%D0%A2%D0%B2%D0%B0%D1%80%D0%B4%D0%BE%D0%B2%D1%81%D0%BA%D0%BE%D0%B3%D0%BE,%208%D0%BA5%D1%811&sll=37.388268,55.792574)\n"
            "\u260E [–ü–æ–∑–≤–æ–Ω–∏—Ç—å: +7 (966) 000-26-26](tel:+79660002626)\n"
            "\U0001F4AC Telegram: @blatznak77\n"
            "\U0001F4F1 [–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp](https://wa.me/79660002626)",
            parse_mode="Markdown"
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ —Ü–∏—Ñ—Ä–∞–º
        results = search_numbers_by_digits(text, max_results=50)
        
        if results:
            reply = f"üîç –ù–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤ —Å '{text}': {len(results)}\n\n"
            reply += "\n".join(results)
        else:
            reply = f"‚ùå –ù–æ–º–µ—Ä–æ–≤ —Å '{text}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for i in range(0, len(reply), 4000):
            await update.message.reply_text(reply[i:i+4000])

# === Main ===
def main():
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unified_handler))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()

if __name__ == "__main__":
    main()

