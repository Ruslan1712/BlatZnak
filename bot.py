
import logging
import os
import re

import gspread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler
from oauth2client.service_account import ServiceAccountCredentials

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google –¢–∞–±–ª–∏—Ü—ã ===
SCOPES = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive.file",
    "https://www.googleapis.com/auth/drive"
]
CREDS = ServiceAccountCredentials.from_json_keyfile_name("blat-znak-2f081fa17909.json", SCOPES)
CLIENT = gspread.authorize(CREDS)
SHEET = CLIENT.open("–≤—Å–µ_–Ω–æ–º–µ—Ä–∞_–¥–ª—è_–±–æ—Ç–∞").sheet1

# === Telegram –ë–æ—Ç ===
BOT_TOKEN = os.getenv("BOT_TOKEN")

async def start(update: Update, context: CallbackContext) -> None:
    keyboard = [[InlineKeyboardButton("üî¢ –ü–æ–∏—Å–∫ –ø–æ —Ü–∏—Ñ—Ä–∞–º", callback_data='search_by_digits')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–º–µ—Ä–æ–≤:", reply_markup=reply_markup)

async def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    if query.data == 'search_by_digits':
        await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 777):")

async def search(update: Update, context: CallbackContext) -> None:
    digits = update.message.text.strip()
    if not digits.isdigit():
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
        return

    try:
        rows = SHEET.get_all_records()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    matches = []
    for row in rows:
        plate = str(row.get("–ù–æ–º–µ—Ä", "")).lower()
        if re.search(f"{digits}$", plate):
            price = row.get("–¶–µ–Ω–∞", "")
            comment = row.get("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "")
            info = f"üöò <b>{plate.upper()}</b>
üí∞ <b>{price}</b>"
            if comment:
                info += f"
üìù {comment}"
            matches.append(info)

    if matches:
        await update.message.reply_text("

".join(matches), parse_mode="HTML")
    else:
        await update.message.reply_text("‚ùó –ù–æ–º–µ—Ä–æ–≤ —Å —Ç–∞–∫–∏–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search))
    application.run_polling()

if __name__ == "__main__":
    main()
