
import logging
import os
import re

import gspread
from oauth2client.service_account import ServiceAccountCredentials

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets ===
SCOPES = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive.file",
    "https://www.googleapis.com/auth/drive"
]

creds = ServiceAccountCredentials.from_json_keyfile_name("blat-znak-2f081fa17909.json", SCOPES)
client = gspread.authorize(creds)
sheet = client.open("–≤—Å–µ_–Ω–æ–º–µ—Ä–∞_–¥–ª—è_–±–æ—Ç–∞").sheet1

# === Telegram Bot ===
TOKEN = os.getenv("BOT_TOKEN")
application = Application.builder().token(TOKEN).build()


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üî¢ –ü–æ–∏—Å–∫ –ø–æ —Ü–∏—Ñ—Ä–∞–º")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–º–µ—Ä–æ–≤:", reply_markup=reply_markup)


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ ===
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()

    if query.startswith("/"):
        return  # –ö–æ–º–∞–Ω–¥—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º

    if "–ø–æ–∏—Å–∫" in query.lower():
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 777):")
        return

    user_digits = re.sub(r"\D", "", query)

    if not user_digits:
        await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return

    rows = sheet.get_all_records()
    results = []

    for row in rows:
        number = str(row.get("–ù–æ–º–µ—Ä", "")).lower().strip()
        digits_only = re.sub(r"\D", "", number)

        if digits_only.endswith(user_digits):
            region = row.get("–†–µ–≥–∏–æ–Ω", "")
            price = row.get("–¶–µ–Ω–∞", "")
            comment = row.get("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "")
            result_line = f"‚Ä¢ {number.upper()} | –†–µ–≥–∏–æ–Ω: {region} | {price} ‚ÇΩ {f'({comment})' if comment else ''}"
            results.append(result_line)

    if results:
        await update.message.reply_text("üîé –ù–∞–π–¥–µ–Ω–æ:\n" + "\n".join(results))
    else:
        await update.message.reply_text("‚ùó –ù–æ–º–µ—Ä–æ–≤ —Å —Ç–∞–∫–∏–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ===
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    application.run_polling()
