import os
import logging
import re
import gspread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from oauth2client.service_account import ServiceAccountCredentials

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
MOSREG_FILE = "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å.txt"
MOTO_FILE = "moto_numbers.txt"
TRAILER_FILE = "trailer_numbers.txt"
MOSCOW_FILE = "270315af-8756-4519-b3cf-88fac83dbc0b.txt"
DEFAULT_PAGE_SIZE = 30
user_pages = {}

def ru_to_lat(text):
    repl = str.maketrans("–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•", "ABEKMHOPCTYX")
    return text.translate(repl)

# === Google Sheets ===
SCOPES = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive",
]
CREDS = ServiceAccountCredentials.from_json_keyfile_name("blat-znak-2f081fa17909.json", SCOPES)
SHEET = gspread.authorize(CREDS).open("–≤—Å–µ_–Ω–æ–º–µ—Ä–∞_–¥–ª—è_–±–æ—Ç–∞").sheet1

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup([
        ["üîç –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –ø–æ —Ü–∏—Ñ—Ä–∞–º (–∞–≤—Ç–æ)", "üî† –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –ø–æ –±—É–∫–≤–∞–º"],
        ["üèç –ú–æ—Ç–æ –Ω–æ–º–µ—Ä–∞"],
        ["üöõ –ü—Ä–∏—Ü–µ–ø –Ω–æ–º–µ—Ä–∞"],
        ["üìç –ú–æ—Å–∫–≤–∞ –≤—Å–µ –Ω–æ–º–µ—Ä–∞"],
        ["üìç –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª. –≤—Å–µ –Ω–æ–º–µ—Ä–∞"],
        ["üõ† –ù–∞—à–∏ —É—Å–ª—É–≥–∏"],
        ["üìû –ù–∞—à –∞–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"]
    ], resize_keyboard=True)

    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏—é BlatZnak!\n"
        "–ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –ø—Ä–æ–¥–∞–∂–µ–π –≥–æ—Å –Ω–æ–º–µ—Ä–æ–≤ –∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–∞ —É—á–µ—Ç.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# === –ü–∞–≥–∏–Ω–∞—Ü–∏—è TXT —Ñ–∞–π–ª–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π "–î–∞–ª–µ–µ" ===
async def send_paginated_text(update, context, filename, category, page=0):
    user_id = update.effective_user.id
    page_size = context.user_data.get("page_size", DEFAULT_PAGE_SIZE)
    with open(filename, "r", encoding="utf-8") as f:
        lines = f.readlines()
    start = page * page_size
    end = start + page_size
    page_lines = lines[start:end]
    if not page_lines:
        await update.effective_message.reply_text("–ù–æ–º–µ—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
        return
    text = "".join(page_lines)
    keyboard = []
    if end < len(lines):
        keyboard = [[InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data=f"{category}|{page + 1}")]]
    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
    await update.effective_message.reply_text(text, reply_markup=reply_markup)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ" ===
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    category, page_str = query.data.split("|")
    page = int(page_str)
    file_map = {
        "moscow": MOSCOW_FILE,
        "mosreg": MOSREG_FILE,
        "moto": MOTO_FILE,
        "trailer": TRAILER_FILE
    }
    filename = file_map.get(category)
    if filename:
        await send_paginated_text(update, context, filename, category, page=page)

# === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ===
async def unified_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_data = context.user_data

    if user_data.get("expecting_page_size"):
        try:
            page_size = int(text)
            if page_size < 1 or page_size > 100:
                raise ValueError
            user_data["page_size"] = page_size
            user_data["expecting_page_size"] = False
            category = user_data["selected_category"]
            file_map = {
                "moscow": MOSCOW_FILE,
                "mosreg": MOSREG_FILE,
                "moto": MOTO_FILE,
                "trailer": TRAILER_FILE
            }
            await send_paginated_text(update, context, file_map[category], category)
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.")
        return

    elif text == "üî† –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –ø–æ –±—É–∫–≤–∞–º":
        user_data["expecting_letter_search"] = True
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–ö):")
        return

    elif user_data.get("expecting_letter_search"):
        query = ru_to_lat(text.upper())
        user_data["expecting_letter_search"] = False
        results = []
        for row in SHEET.get_all_values()[1:]:
            only_letters = ru_to_lat("".join(re.findall(r"[–ê-–ØA-Z]+", row[0].upper())))
            if query in only_letters:
                results.append(f"{row[0]} {row[1]} - {row[2]}‚ÇΩ {row[3]}")
        reply = "\n".join(results) if results else "‚ùó –ù–æ–º–µ—Ä–æ–≤ —Å —Ç–∞–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        await update.message.reply_text(reply)
        return

    elif text == "üîç –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –ø–æ —Ü–∏—Ñ—Ä–∞–º (–∞–≤—Ç–æ)":
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 777):")
    elif text in {
        "üèç –ú–æ—Ç–æ –Ω–æ–º–µ—Ä–∞", "üöõ –ü—Ä–∏—Ü–µ–ø –Ω–æ–º–µ—Ä–∞",
        "üìç –ú–æ—Å–∫–≤–∞ –≤—Å–µ –Ω–æ–º–µ—Ä–∞", "üìç –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª. –≤—Å–µ –Ω–æ–º–µ—Ä–∞"
    }:
        category_map = {
            "üèç –ú–æ—Ç–æ –Ω–æ–º–µ—Ä–∞": "moto",
            "üöõ –ü—Ä–∏—Ü–µ–ø –Ω–æ–º–µ—Ä–∞": "trailer",
            "üìç –ú–æ—Å–∫–≤–∞ –≤—Å–µ –Ω–æ–º–µ—Ä–∞": "moscow",
            "üìç –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª. –≤—Å–µ –Ω–æ–º–µ—Ä–∞": "mosreg"
        }
        category = category_map[text]
        user_data["expecting_page_size"] = True
        user_data["selected_category"] = category
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30)")
    elif text == "üõ† –ù–∞—à–∏ —É—Å–ª—É–≥–∏":
        await update.message.reply_text(
            "üìå –ù–∞—à–∏ —É—Å–ª—É–≥–∏:\n"
            "- –î—É–±–ª–∏–∫–∞—Ç –Ω–æ–º–µ—Ä–æ–≤\n"
            "- –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ —É—á–µ—Ç\n"
            "- –ü—Ä–æ–¥–∞–∂–∞ –∫—Ä–∞—Å–∏–≤—ã—Ö –Ω–æ–º–µ—Ä–æ–≤\n"
            "- –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ"
        )
    elif text == "üìû –ù–∞—à –∞–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã":
        await update.message.reply_text(
            "üè¢ –ê–¥—Ä–µ—Å: —É–ª. –¢–≤–∞—Ä–¥–æ–≤—Å–∫–æ–≥–æ 8 –∫5 —Å1\n"
            "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 127-74-04\n"
            "üí¨ Telegram: @blatznak\n"
            "üì± WhatsApp: +7 903 798-55-89"
        )
    else:
        digits = text
        results = []
        for row in SHEET.get_all_values()[1:]:
            if digits in row[0]:
                results.append(f"{row[0]} {row[1]} - {row[2]}‚ÇΩ {row[3]}")
        reply = "\n".join(results) if results else "‚ùó –ù–æ–º–µ—Ä–æ–≤ —Å —Ç–∞–∫–∏–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        await update.message.reply_text(reply)

# === Main ===
def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unified_handler))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.run_polling()

if __name__ == "__main__":
    main()
