import logging
import os
import re
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# === Google Sheets Setup ===
SCOPE = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/spreadsheets",
         "https://www.googleapis.com/auth/drive.file", "https://www.googleapis.com/auth/drive"]
CREDS = ServiceAccountCredentials.from_json_keyfile_name("blat-znak-2f081fa17909.json", SCOPE)
CLIENT = gspread.authorize(CREDS)
SHEET = CLIENT.open("–≤—Å–µ_–Ω–æ–º–µ—Ä–∞_–¥–ª—è_–±–æ—Ç–∞").sheet1

# === Telegram Bot ===
PAGE_SIZE_DEFAULT = 10
PAGE_SIZE_MOTO = 30
user_pages = {}
user_categories = {}
user_limits = {}
user_totals = {}

def get_main_keyboard():
    keyboard = [
        ["üõµ –ú–æ—Ç–æ –Ω–æ–º–µ—Ä–∞", "üöõ –ü—Ä–∏—Ü–µ–ø –Ω–æ–º–µ—Ä–∞"],
        ["üî¢ –ü–æ–∏—Å–∫ –ø–æ —Ü–∏—Ñ—Ä–∞–º"],
        ["üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–æ–º–µ—Ä–∞"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_page_keyboard(current_page, total_pages):
    keyboard = []
    row = []
    if current_page > 0:
        row.append("‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è")
    if current_page < total_pages - 1:
        row.append("‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∞—è")
    row.append("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    keyboard.append(row)
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def load_all_numbers_from_gsheet():
    rows = SHEET.get_all_records()
    result = []
    for row in rows:
        number = str(row.get("–ù–æ–º–µ—Ä", "")).lower()
        region = str(row.get("–†–µ–≥–∏–æ–Ω", ""))
        price_raw = str(row.get("–°—Ç–æ–∏–º–æ—Å—Ç—å", "")).replace(" ", "").replace(".", "")
        try:
            price = int(price_raw)
            formatted = f"<b>{number}</b> ({region})\n<b>{price:,} ‚ÇΩ</b>".replace(",", ".")
            result.append((number, formatted))
        except ValueError:
            continue
    return result

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–º–µ—Ä–æ–≤:", reply_markup=get_main_keyboard())

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    text = update.message.text.strip().lower()
    logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")

    if text == "‚¨ÖÔ∏è –Ω–∞–∑–∞–¥":
        user_pages.pop(user_id, None)
        user_categories.pop(user_id, None)
        user_limits.pop(user_id, None)
        user_totals.pop(user_id, None)
        await update.message.reply_text("‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())
        return

    if text == "üî¢ –ø–æ–∏—Å–∫ –ø–æ —Ü–∏—Ñ—Ä–∞–º":
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 777):")
        return

    if text == "üìã –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–æ–º–µ—Ä–∞":
        all_numbers = load_all_numbers_from_gsheet()
        formatted_list = [entry[1] for entry in all_numbers]
        chunks = [formatted_list[i:i + 10] for i in range(0, len(formatted_list), 10)]
        for chunk in chunks:
            await update.message.reply_text("\n\n".join(chunk), parse_mode="HTML")
        return

    if user_id in user_pages and user_id in user_categories:
        page = user_pages[user_id]
        category_data = user_categories[user_id]
        page_limit = user_limits.get(user_id, PAGE_SIZE_DEFAULT)
        total = user_totals.get(user_id, len(category_data))
        total_pages = max((total + page_limit - 1) // page_limit, 1)

        if text == "‚óÄÔ∏è –ø—Ä–µ–¥—ã–¥—É—â–∞—è" and page > 0:
            page -= 1
        elif text == "‚ñ∂Ô∏è —Å–ª–µ–¥—É—é—â–∞—è" and page < total_pages - 1:
            page += 1
        user_pages[user_id] = page

        start = page * page_limit
        end = start + page_limit
        await update.message.reply_text(
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n\n" + "\n\n".join(category_data[start:end]),
            reply_markup=get_page_keyboard(page, total_pages),
            parse_mode="HTML"
        )
        return

    # –ü–æ–∏—Å–∫ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 3 —Ü–∏—Ñ—Ä–∞–º –Ω–æ–º–µ—Ä–∞ (—Å—Ç—Ä–æ–≥–æ –ø–æ –ø–æ—Ä—è–¥–∫—É)
    if text.isdigit():
        if len(text) != 3:
            await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ 3 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 777).")
            return

        matches = []
        for number, formatted in load_all_numbers_from_gsheet():
            digits = re.sub(r"\D", "", number)
            if digits.endswith(text):
                matches.append(formatted)

        if matches:
            chunks = [matches[i:i + 10] for i in range(0, len(matches), 10)]
            for chunk in chunks:
                await update.message.reply_text("\n\n".join(chunk), parse_mode="HTML")
        else:
            await update.message.reply_text("‚ùó –ù–æ–º–µ—Ä–æ–≤ —Å —Ç–∞–∫–∏–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    await update.message.reply_text("‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π.", reply_markup=get_main_keyboard())

if __name__ == '__main__':
    application = Application.builder().token("7799074981:AAFKHc41FKQb_yDI-gemhq6stMagiIfQ680").build()

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (DEBUG —Ä–µ–∂–∏–º)")

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()
