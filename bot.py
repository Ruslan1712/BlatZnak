import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
MOTO_FILE = "moto_numbers.txt"
TRAILER_FILE = "trailer_numbers.txt"
PAGE_SIZE = 20
user_pages = {}

# === Google Sheets ===
SCOPES = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive",
]
CREDS = ServiceAccountCredentials.from_json_keyfile_name("blat-znak-2f081fa17909.json", SCOPES)
SHEET = gspread.authorize(CREDS).open("–≤—Å–µ_–Ω–æ–º–µ—Ä–∞_–¥–ª—è_–±–æ—Ç–∞").sheet1

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä–∞ –ø–æ —Ü–∏—Ñ—Ä–∞–º (–∞–≤—Ç–æ)"],
        ["üìã –í—Å–µ –∞–≤—Ç–æ –Ω–æ–º–µ—Ä–∞"],
        ["üèç –ú–æ—Ç–æ –Ω–æ–º–µ—Ä–∞"],
        ["üöõ –ü—Ä–∏—Ü–µ–ø –Ω–æ–º–µ—Ä–∞"],
        ["üõ† –ù–∞—à–∏ —É—Å–ª—É–≥–∏"],
        ["üìû –ù–∞—à –∞–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"]
    ]
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏—é BlatZnak!\n"
        "–ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –ø—Ä–æ–¥–∞–∂–µ–π –≥–æ—Å –Ω–æ–º–µ—Ä–æ–≤ –∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–∞ —É—á–µ—Ç.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

# === –•–µ–Ω–¥–ª–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    text = update.message.text.strip()
    user_id = update.message.from_user.id

    if text == "üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä–∞ –ø–æ —Ü–∏—Ñ—Ä–∞–º (–∞–≤—Ç–æ)":
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 777):")
        context.user_data['search_mode'] = True
        return

    if context.user_data.get('search_mode'):
        context.user_data['search_mode'] = False
        digits = text
        results = []
        for row in SHEET.get_all_values()[1:]:
            if digits in row[0]:
                results.append(f"{row[0]} {row[1]} - {row[2]}‚ÇΩ {row[3]}")
        reply = "\n".join(results) if results else "‚ùó –ù–æ–º–µ—Ä–æ–≤ —Å —Ç–∞–∫–∏–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        await update.message.reply_text(reply)
        return

    if text == "üìã –í—Å–µ –∞–≤—Ç–æ –Ω–æ–º–µ—Ä–∞":
        rows = SHEET.get_all_values()[1:]
        result = "\n".join([f"{row[0]} {row[1]} - {row[2]}‚ÇΩ {row[3]}" for row in rows])
        await update.message.reply_text(result or "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")

    elif text == "üèç –ú–æ—Ç–æ –Ω–æ–º–µ—Ä–∞":
        await send_paginated_text(update, context, MOTO_FILE, "moto")

    elif text == "üöõ –ü—Ä–∏—Ü–µ–ø –Ω–æ–º–µ—Ä–∞":
        await send_paginated_text(update, context, TRAILER_FILE, "trailer")

    elif text == "üõ† –ù–∞—à–∏ —É—Å–ª—É–≥–∏":
        await update.message.reply_text(
            "üìå –ù–∞—à–∏ —É—Å–ª—É–≥–∏:\n"
            "- –î—É–±–ª–∏–∫–∞—Ç –Ω–æ–º–µ—Ä–æ–≤\n"
            "- –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ —É—á–µ—Ç\n"
            "- –ü—Ä–æ–¥–∞–∂–∞ –∫—Ä–∞—Å–∏–≤—ã—Ö –Ω–æ–º–µ—Ä–æ–≤\n"
            "- –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ"
        )

    elif text == "üìû –ù–∞—à –∞–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã":
        await update.message.reply_text(
            "üè¢ –ê–¥—Ä–µ—Å: —É–ª. –¢–≤–∞—Ä–¥–æ–≤—Å–∫–æ–≥–æ 8 –∫5 —Å1\n"
            "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 127-74-04\n"
            "üí¨ Telegram: @blatznak\n"
            "üì± WhatsApp: https://wa.me/79037985589"
        )

    elif text.startswith("‚û°Ô∏è –î–∞–ª–µ–µ"):
        category = context.user_data.get("pagination_category")
        if category:
            file = MOTO_FILE if category == "moto" else TRAILER_FILE
            await send_paginated_text(update, context, file, category, next_page=True)

# === –ü–∞–≥–∏–Ω–∞—Ü–∏—è TXT —Ñ–∞–π–ª–æ–≤ ===
async def send_paginated_text(update, context, filename, category, next_page=False):
    user_id = update.message.from_user.id
    page = user_pages.get(user_id, 0)
    if next_page:
        page += 1
    with open(filename, "r", encoding="utf-8") as f:
        lines = f.readlines()
    start = page * PAGE_SIZE
    end = start + PAGE_SIZE
    page_lines = lines[start:end]
    if not page_lines:
        await update.message.reply_text("–ù–æ–º–µ—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
        return
    text = "".join(page_lines)
    user_pages[user_id] = page
    context.user_data['pagination_category'] = category
    buttons = [["‚û°Ô∏è –î–∞–ª–µ–µ"]] if end < len(lines) else []
    await update.message.reply_text(text, reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))

# === Main ===
def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == "__main__":
    main()
