import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import gspread
import re
from oauth2client.service_account import ServiceAccountCredentials

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
MOSREG_FILE = "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å.txt"
MOTO_FILE = "moto_numbers.txt"
TRAILER_FILE = "trailer_numbers.txt"
MOSCOW_FILE = "270315af-8756-4519-b3cf-88fac83dbc0b.txt"
DEFAULT_PAGE_SIZE = 30

def ru_to_lat(text):
    repl = str.maketrans("–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•", "ABEKMHOPCTYX")
    return text.translate(repl)

# === Google Sheets ===
SCOPES = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive",
]
CREDS = ServiceAccountCredentials.from_json_keyfile_name("blat-znak-2f081fa17909.json", SCOPES)
SHEET = gspread.authorize(CREDS).open("–≤—Å–µ_–Ω–æ–º–µ—Ä–∞_–¥–ª—è_–±–æ—Ç–∞").sheet1

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup([
        ["üîÅ –°—Ç–∞—Ä—Ç"],
        ["\U0001F50D –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –ø–æ —Ü–∏—Ñ—Ä–∞–º (–∞–≤—Ç–æ)", "\U0001F520 –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –ø–æ –±—É–∫–≤–∞–º"],
        ["\U0001F6CD –ú–æ—Ç–æ –Ω–æ–º–µ—Ä–∞", "\U0001F69B –ü—Ä–∏—Ü–µ–ø –Ω–æ–º–µ—Ä–∞"],
        ["\U0001F4CD –ú–æ—Å–∫–≤–∞ –≤—Å–µ –Ω–æ–º–µ—Ä–∞", "\U0001F4CD –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª. –≤—Å–µ –Ω–æ–º–µ—Ä–∞"],
        ["\U0001F6E0 –ù–∞—à–∏ —É—Å–ª—É–≥–∏", "\U0001F4DE –ù–∞—à –∞–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"]
    ], resize_keyboard=True)

    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏—é BlatZnak!\n"
        "–ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –ø—Ä–æ–¥–∞–∂–µ–π –≥–æ—Å –Ω–æ–º–µ—Ä–æ–≤ –∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–∞ —É—á–µ—Ç.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# === –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª —Ü–µ–ª–∏–∫–æ–º ===
async def send_full_file(update: Update, context: ContextTypes.DEFAULT_TYPE, filename: str):
    if not os.path.exists(filename):
        await update.message.reply_text("–§–∞–π–ª —Å –Ω–æ–º–µ—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    with open(filename, "r", encoding="utf-8") as f:
        content = f.read()
        for i in range(0, len(content), 4000):
            await update.message.reply_text(content[i:i+4000])

# === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ===
async def unified_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_data = context.user_data

    if text == "üîÅ –°—Ç–∞—Ä—Ç":
        await start(update, context)
        return

    if user_data.get("expecting_page_size"):
        try:
            page_size = int(text)
            if page_size < 1 or page_size > 100:
                raise ValueError
            user_data["page_size"] = page_size
            user_data["expecting_page_size"] = False
            category = user_data["selected_category"]
            file_map = {
                "moscow": MOSCOW_FILE,
                "mosreg": MOSREG_FILE,
                "trailer": TRAILER_FILE
            }
            filename = file_map[category]
            with open(filename, "r", encoding="utf-8") as f:
                lines = f.readlines()
            for i in range(0, len(lines), page_size):
                chunk = "".join(lines[i:i + page_size])
                await update.message.reply_text(chunk)
        except ValueError:
            user_data["expecting_page_size"] = False
            await update.message.reply_text(
                "\u2757 –°–µ–π—á–∞—Å –æ–∂–∏–¥–∞–ª–æ—Å—å —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100 –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–æ–º–µ—Ä–æ–≤. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ üîÅ –°—Ç–∞—Ä—Ç –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
            )
        return

    elif text == "\U0001F520 –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –ø–æ –±—É–∫–≤–∞–º":
        user_data["expecting_letter_search"] = True
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–ö):")
        return

    elif user_data.get("expecting_letter_search"):
        query = ru_to_lat(text.upper())
        user_data["expecting_letter_search"] = False
        sheet_data = SHEET.get_all_values()[1:]
        results = []
        for row in sheet_data:
            only_letters = ru_to_lat("".join(re.findall(r"[–ê-–ØA-Z]+", row[0].upper())))
            if query in only_letters:
                results.append(f"{row[0]} {row[1]} - {row[2]}‚ÇΩ {row[3]}")
        reply = "\n".join(results) if results else "\u2757 –ù–æ–º–µ—Ä–æ–≤ —Å —Ç–∞–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        await update.message.reply_text(reply)
        return

    elif text == "\U0001F50D –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –ø–æ —Ü–∏—Ñ—Ä–∞–º (–∞–≤—Ç–æ)":
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 777):")

    elif text == "\U0001F6CD –ú–æ—Ç–æ –Ω–æ–º–µ—Ä–∞":
        await send_full_file(update, context, MOTO_FILE)

    elif text in {
        "\U0001F69B –ü—Ä–∏—Ü–µ–ø –Ω–æ–º–µ—Ä–∞",
        "\U0001F4CD –ú–æ—Å–∫–≤–∞ –≤—Å–µ –Ω–æ–º–µ—Ä–∞",
        "\U0001F4CD –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª. –≤—Å–µ –Ω–æ–º–µ—Ä–∞"
    }:
        category_map = {
            "\U0001F69B –ü—Ä–∏—Ü–µ–ø –Ω–æ–º–µ—Ä–∞": "trailer",
            "\U0001F4CD –ú–æ—Å–∫–≤–∞ –≤—Å–µ –Ω–æ–º–µ—Ä–∞": "moscow",
            "\U0001F4CD –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª. –≤—Å–µ –Ω–æ–º–µ—Ä–∞": "mosreg"
        }
        category = category_map[text]
        user_data["expecting_page_size"] = True
        user_data["selected_category"] = category
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30)")

    elif text == "\U0001F6E0 –ù–∞—à–∏ —É—Å–ª—É–≥–∏":
        await update.message.reply_text(
            "\U0001F4CC –ù–∞—à–∏ —É—Å–ª—É–≥–∏:\n"
            "- –î—É–±–ª–∏–∫–∞—Ç –Ω–æ–º–µ—Ä–æ–≤\n"
            "- –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ —É—á–µ—Ç\n"
            "- –ü—Ä–æ–¥–∞–∂–∞ –∫—Ä–∞—Å–∏–≤—ã—Ö –Ω–æ–º–µ—Ä–æ–≤\n"
            "- –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ"
        )

    elif text == "\U0001F4DE –ù–∞—à –∞–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã":
        await update.message.reply_text(
            "\U0001F3E2 –ê–¥—Ä–µ—Å: —É–ª–∏—Ü–∞ –¢–≤–∞—Ä–¥–æ–≤—Å–∫–æ–≥–æ, 8–∫5—Å1, –ú–æ—Å–∫–≤–∞\n"
            "\U0001F4CD [–û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ù–∞–≤–∏–≥–∞—Ç–æ—Ä–µ](https://yandex.ru/navi/?ol=geo&text=%D1%83%D0%BB%D0%B8%D1%86%D0%B0%20%D0%A2%D0%B2%D0%B0%D1%80%D0%B4%D0%BE%D0%B2%D1%81%D0%BA%D0%BE%D0%B3%D0%BE,%208%D0%BA5%D1%811&sll=37.388268,55.792574)\n"
            "\u260E [–ü–æ–∑–≤–æ–Ω–∏—Ç—å: +7 (966) 000-26-26](tel:+79660002626)\n"
            "\U0001F4AC Telegram: @blatznak77\n"
            "\U0001F4F1 [–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp](https://wa.me/79660002626)",
            parse_mode="Markdown"
        )
    else:
        digits = text
        sheet_data = SHEET.get_all_values()[1:]
        results = []
        for row in sheet_data:
            if digits in row[0]:
                results.append(f"{row[0]} {row[1]} - {row[2]}‚ÇΩ {row[3]}")
        reply = "\n".join(results) if results else "\u2757 –ù–æ–º–µ—Ä–æ–≤ —Å —Ç–∞–∫–∏–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        await update.message.reply_text(reply)

# === Main ===
def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unified_handler))
    app.run_polling()

if __name__ == "__main__":
    main()
